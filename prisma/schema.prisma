generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model GeneralInformation {
  id          Int    @id @default(autoincrement())
  name        String
  vision      String
  mission     String
  description String
  image       String
}

model User {
  id                Int    @id @default(autoincrement())
  firstName         String
  firstSurname      String
  secondSurname     String
  phoneNumber       String
  birthDate         String
  identification    String @unique
  state             State
  email             String @unique
  password          String
  isPasswordChanged String
  role              Role
}

model Participant {
  id                             Int                     @id @default(autoincrement())
  firstName                      String
  firstSurname                   String
  secondSurname                  String
  email                          String
  phoneNumber                    String
  birthDate                      String
  identification                 String
  hasWhatsApp                    YesOrNo
  photo                          String?                 @db.VarChar(255)
  grade                          Grade
  typeIdentification             TypeIdentification
  expirationDateMedicalInsurance String?
  expirationDateMedicalReport    String?
  participantAttachments         ParticipantAttachment[]
  participantHealths             ParticipantHealth?
  participantsOnCourses          ParticipantOnCourse[]
  referenceContacts              ReferenceContact[]
}

model ParticipantAttachment {
  id             Int         @id @default(autoincrement())
  name           String
  attachmentFile String      @db.VarChar(255)
  participantId  Int
  type           String?     @db.VarChar(100)
  participant    Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([participantId], map: "ParticipantAttachment_participantId_fkey")
}

model ParticipantOnCourse {
  participantId Int
  courseId      Int
  state         StateParticipantOnCourse
  courses       Course                   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  participants  Participant              @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@id([participantId, courseId])
  @@index([courseId], map: "ParticipantOnCourse_courseId_fkey")
}

model ReferenceContact {
  id            Int         @id @default(autoincrement())
  firstName     String
  firstSurname  String
  secondSurname String
  phoneNumber   String
  relationship  String
  participantId Int
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([participantId], map: "ReferenceContact_participantId_fkey")
}

model ParticipantHealth {
  id                   Int                   @id @default(autoincrement())
  bloodType            String
  participantId        Int                   @unique
  participantDisseases ParticipantDissease[]
  participant          Participant           @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantMedicines ParticipantMedicine[]
}

model ParticipantDissease {
  id                  Int               @id @default(autoincrement())
  disease             String
  description         String?
  participantHealthId Int
  participantHealth   ParticipantHealth @relation(fields: [participantHealthId], references: [id], onDelete: Cascade)

  @@index([participantHealthId], map: "ParticipantDissease_participantHealthId_fkey")
}

model ParticipantMedicine {
  id                  Int               @id @default(autoincrement())
  medicine            String
  description         String?
  participantHealthId Int
  participantHealth   ParticipantHealth @relation(fields: [participantHealthId], references: [id], onDelete: Cascade)

  @@index([participantHealthId], map: "ParticipantMedicine_participantHealthId_fkey")
}

model Course {
  id                    Int                   @id @default(autoincrement())
  courseNumber          String                @unique
  initialDate           String
  finalDate             String
  name                  String
  location              String?
  professor             String
  quota                 Int
  description           String?
  state                 State                 @default(Active)
  needMedicalReport     YesOrNo
  participantsOnCourses ParticipantOnCourse[]
}

enum State {
  Active
  Inactive
}

enum Role {
  Admin
  User
}

enum TypeIdentification {
  Nacional
  DIMEX
}

enum Grade {
  Sin_Estudio
  Primaria_Completa
  Primaria_Incompleta
  Secundaria_Completa
  Secundaria_Incompleta
  Universidad_Incompleta
  Universidad_Completa
}

enum StateParticipantOnCourse {
  Retired
  Registered
  Finished
}

enum YesOrNo {
  Yes
  No
}
